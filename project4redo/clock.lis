     1                                  
     2                                  extern printf
     3                                  
     4                                  extern scanf
     5                                  
     6                                  global clocktime
     7                                  
     8                                  segment .data
     9                                  
    10                                  ;======declare messages========
    11                                   
    12 00000000 54686520636C6F636B-     initialmessage db "The clock module has started and the time is %ld tics", 10, 0
    12 00000009 206D6F64756C652068-
    12 00000012 617320737461727465-
    12 0000001B 6420616E6420746865-
    12 00000024 2074696D6520697320-
    12 0000002D 256C6420746963730A-
    12 00000036 00                 
    13                                  
    14 00000037 506C6561736520656E-     promptmessage db "Please enter the number of desired iterations: x ", 10
    14 00000040 74657220746865206E-
    14 00000049 756D626572206F6620-
    14 00000052 646573697265642069-
    14 0000005B 7465726174696F6E73-
    14 00000064 3A2078200A         
    15                                  
    16 00000069 256C64                  inputformat db "%ld"
    17                                  
    18 0000006C 5468616E6B20796F75-     thanks db "Thank you. The iterations will be from 1 through the number inputted.", 10, 0
    18 00000075 2E2054686520697465-
    18 0000007E 726174696F6E732077-
    18 00000087 696C6C206265206672-
    18 00000090 6F6D2031207468726F-
    18 00000099 75676820746865206E-
    18 000000A2 756D62657220696E70-
    18 000000AB 75747465642E0A00   
    19                                  
    20 000000B3 497465726172696F6E-     iteration db "Iterarion number: %ld      Sqrt: %ld", 10, 0
    20 000000BC 206E756D6265723A20-
    20 000000C5 256C64202020202020-
    20 000000CE 537172743A20256C64-
    20 000000D7 0A00               
    21                                  
    22 000000D9 546F74616C2074696D-     totaltime db "Total time for computing square roots: %ld tics = %lf seconds", 10, 0
    22 000000E2 6520666F7220636F6D-
    22 000000EB 707574696E67207371-
    22 000000F4 7561726520726F6F74-
    22 000000FD 733A20256C64207469-
    22 00000106 6373203D20256C6620-
    22 0000010F 7365636F6E64730A00 
    23                                  
    24 00000118 54686520636C6F636B-     bye db "The clock function will now return the time to the caller", 10, 0 
    24 00000121 2066756E6374696F6E-
    24 0000012A 2077696C6C206E6F77-
    24 00000133 2072657475726E2074-
    24 0000013C 68652074696D652074-
    24 00000145 6F207468652063616C-
    24 0000014E 6C65720A00         
    25                                  
    26                                  segment .bss
    27                                  
    28                                  ;========begin =========
    29                                  
    30                                  segment .text
    31                                  
    32                                  clocktime:
    33                                  
    34                                  ;=====back up GPRS ===========
    35 00000000 55                      push       rbp                                     ;Save a copy of the stack base pointer
    36 00000001 4889E5                  mov        rbp, rsp                                ;We do this in order to be 100% compatible with C and C++.
    37 00000004 53                      push       rbx                                     ;Back up rbx
    38 00000005 51                      push       rcx                                     ;Back up rcx
    39 00000006 52                      push       rdx                                     ;Back up rdx
    40 00000007 56                      push       rsi                                     ;Back up rsi
    41 00000008 57                      push       rdi                                     ;Back up rdi
    42 00000009 4150                    push       r8                                      ;Back up r8
    43 0000000B 4151                    push       r9                                      ;Back up r9
    44 0000000D 4152                    push       r10                                     ;Back up r10
    45 0000000F 4153                    push       r11                                     ;Back up r11
    46 00000011 4154                    push       r12                                     ;Back up r12
    47 00000013 4155                    push       r13                                     ;Back up r13
    48 00000015 4156                    push       r14                                     ;Back up r14
    49 00000017 4157                    push       r15                                     ;Back up r15
    50 00000019 9C                      pushf                                              ;Back up rflags
    51                                  
    52                                  ;=======Read the time on clock and save that time==========
    53                                  
    54 0000001A B800000000              mov qword rax, 0												;make sure rax is zerod out. This may be in-necessary.
    55 0000001F BA00000000              mov qword rdx, 0
    56 00000024 0FA2                    cpuid																		
    57 00000026 0F31                    rdtsc																;write the number of tics in edx:eax
    58 00000028 48C1E220                shl rdx, 32														;shift the lower half of rdx to the upper half of rdx
    59 0000002C 4809D0                  or rax, rdx														;join the two half into a single register, namely:rax
    60 0000002F 4989D7                  mov r15, rdx													;save the clock in a safe register, r15
    61                                  
    62                                  ;=========display the time==================
    63                                  
    64 00000032 B800000000              mov qword rax, 0												;No data from SSE will be printed
    65 00000037 48BF-                   mov rdi, initialmessage										;"The time is %ld tics"
    65 00000039 [0000000000000000] 
    66 00000041 4C89FE                  mov rsi, r15											
    67 00000044 E8(00000000)            call printf
    68                                  
    69                                  ;=======prompt iterations==========
    70                                  
    71 00000049 B800000000              mov qword rax, 0
    72 0000004E 48BF-                   mov rdi, promptmessage							;"please enter the iteration"
    72 00000050 [3700000000000000] 
    73 00000058 E8(00000000)            call printf
    74                                  
    75                                  ;====scanf for input===============
    76                                  
    77 0000005D 6A00                    push qword 0
    78 0000005F 6A00                    push qword 0
    79 00000061 B800000000              mov rax, 0
    80 00000066 48BF-                   mov rdi, inputformat						;"%ld"
    80 00000068 [6900000000000000] 
    81 00000070 4889E6                  mov rsi, rsp
    82 00000073 E8(00000000)            call scanf
    83 00000078 415E                    pop r14										;hold # of iteration in r14
    84 0000007A 58                      pop rax		
    85                                  
    86                                  ;=========== display thanks ======
    87                                  
    88                                  ;mov qword rax, 0
    89                                  ;mov rdi, thanks			;"iteration from 1 to inputted number"
    90                                  ;call printf
    91                                  
    92                                  
    93                                  ;==========check for the # of iterations==========
    94                                  
    95                                  ;mov 12, 0				;r12 is the counter = 0
    96                                  ;mov r13, 10
    97                                  
    98                                  ;mov rax, r14			;move inputted # to rax
    99                                  ;cqo
   100                                  ;idiv r13					;inputted # divide by 10
   101                                  
   102                                  ;mov r13, rax			;store quotient to r13
   103                                  ;mov rbx, rdx			;store remainder to rbx
   104                                  
   105                                  ;==== is iteration less than 10???=========
   106                                  ;cmp r14, 10				;compare inputted with 10
   107                                  ;jl lessthanten			;if less go to lessthanten
   108                                  
   109                                  ;=== is iteration exactly 10???========
   110                                  ;cmp rbx, 0				;compare remainder to 0
   111                                  ;je exactly				;if exact go to exactly
   112                                  
   113                                  ;==== is iteration more than 10???======
   114                                  
   115                                  ;jmp morethanten		;go to morethanten
   116                                  
   117                                  ;====== LESS THAN 10 =========
   118                                  
   119                                  ;lessthanten:
   120                                  
   121                                  ;less:
   122                                  
   123                                  ;cmp r14, r12			;compare input with 0
   124                                  ;je exit
   125                                  ;inc r12					;increase counter
   126                                  ;mov r13, r12			;move counter to r13
   127                                  ;cvtsi2sd xmm1, r13	;convert to float
   128                                  ;sqrtsd xmm0, xmm1		;square root number
   129                                  
   130                                  ;===display LESS THAN 10==============
   131                                  ;push qword 0
   132                                  ;mov rax, 1
   133                                  ;mov rdi, iteration
   134                                  ;mov rsi, r12
   135                                  ;call printf
   136                                  
   137                                  ;pop rax
   138                                  
   139                                  ;jmp less
   140                                  
   141                                  ;=====EXACTLY 10 ========
   142                                  
   143                                  ;exactly:
   144                                  
   145                                  ;exactten:
   146                                  
   147                                  ;cmp r12, 10
   148                                  ;je exit
   149                                  ;inc 12
   150                                  ;mov rbx, r13
   151                                  ;imul rbx, r12
   152                                  ;cvtsi2sd xmm1, rbx
   153                                  ;sqrtsd xmm0, xmm1
   154                                  
   155                                  ;====display EXACTLY 10================
   156                                  
   157                                  ;push qword 0
   158                                  ;mov rax, 1
   159                                  ;mov rdi, iteration
   160                                  ;mov rsi, r12
   161                                  ;call printf
   162                                  
   163                                  ;pop rax
   164                                  
   165                                  ;jmp exactten
   166                                  
   167                                  ;==== MORE THAN TEN ==============
   168                                  ;morethanten:
   169                                  
   170                                  ;more:
   171                                  
   172                                  ;cmp r12, 10
   173                                  ;je finditer
   174                                  ;inc r12
   175                                  ;mov r14, r13
   176                                  ;imul r14, r12
   177                                  ;cvtsisd xmm1, r14
   178                                  ;sqrtsd cmm0, xmm1
   179                                  
   180                                  ;==== display MORE THAN 10 ==============
   181                                  ;mov qword 0
   182                                  ;mov rax, 1
   183                                  ;mov rdi, interation
   184                                  ;mov rsi, r14
   185                                  ;call printf
   186                                  
   187                                  ;pop rax
   188                                  
   189                                  ;jmp more
   190                                  
   191                                  ;===== find iterations =====
   192                                  ;finditer:
   193                                  
   194                                  ;add r14, rbx 				;add remainder to previous iteration
   195                                  ;cvtsi2sd xmm2, r14
   196                                  ;sqrtsd xmm0, xmm2
   197                                  
   198                                  ;===== display ======
   199                                  
   200                                  ;push qword 0
   201                                  ;mov rax, 1
   202                                  ;mov rdi, iteration
   203                                  ;mov rsi, r14
   204                                  ;call printf
   205                                  
   206                                  ;pop rax
   207                                  ;jmp exit
   208                                  
   209                                  ;==== find total time=========
   210                                  
   211                                  ;exit:
   212                                  
   213                                  ;mov qword rdx, 0					;set registers back to zero
   214                                  ;mov qword rax, 0
   215                                  ;cpuid
   216                                  ;rdtsc
   217                                  ;shl rdx, 32
   218                                  ;or rax, rdx
   219                                  
   220                                  ;mov r12, rax
   221                                  
   222                                  ;=== calculate total time (end - beginning) =====
   223                                  
   224                                  ;sub r12, r15
   225                                  
   226                                  ;====== get processor number =======
   227                                  
   228                                  
   229 0000007B 48B800000000000020-     mov rax, 0x4020000000000000
   229 00000084 40                 
   230 00000085 50                      push rax
   231 00000086 F2440F102424            movsd xmm12, [rsp]
   232 0000008C F2410F10C4              movsd xmm0,xmm12
   233 00000091 58                      pop rax
   234                                  
   235                                  ;===============restore=======
   236 00000092 9D                      popf                                                        ;Restore rflags
   237 00000093 415F                    pop        r15                                              ;Restore r15
   238 00000095 415E                    pop        r14                                              ;Restore r14
   239 00000097 415D                    pop        r13                                              ;Restore r13
   240 00000099 415C                    pop        r12                                              ;Restore r12
   241 0000009B 415B                    pop        r11                                              ;Restore r11
   242 0000009D 415A                    pop        r10                                              ;Restore r10
   243 0000009F 4159                    pop        r9                                               ;Restore r9
   244 000000A1 4158                    pop        r8                                               ;Restore r8
   245 000000A3 5F                      pop        rdi                                              ;Restore rdi
   246 000000A4 5E                      pop        rsi                                              ;Restore rsi
   247 000000A5 5A                      pop        rdx                                              ;Restore rdx
   248 000000A6 59                      pop        rcx                                              ;Restore rcx
   249 000000A7 5B                      pop        rbx                                              ;Restore rbx
   250 000000A8 5D                      pop        rbp                                              ;Return rbp to point to the base of the activation record of the caller.
   251                                  
   252 000000A9 C3                      ret
   253                                  
   254                                  
