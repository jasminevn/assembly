     1                                  
     2                                  ;Jasmine Nguyen
     3                                  ;March 28, 2019
     4                                  
     5                                  
     6                                  ;===========Begin code area=====================
     7                                  
     8                                  extern printf								;External C++ function for writing to standard output device  
     9                                  
    10                                  extern scanf								;External C++ function for reading from the standard input device
    11                                  
    12                                  extern evenonly
    13                                  
    14                                  global replace				         ;This makes replace callable by function outside of this file
    15                                  
    16                                  segment .data								;Place initialized data here
    17                                  
    18                                  ;=============Declare some messages =======================
    19                                  
    20 00000000 46696E642074686520-     output db "Find the odd numbers and square it" , 10 , 0
    20 00000009 6F6464206E756D6265-
    20 00000012 727320616E64207371-
    20 0000001B 756172652069740A00 
    21                                  
    22                                  
    23                                  ;==========Begin application =========================
    24                                  segment .text									;Place executable instructions
    25                                  
    26                                  replace:								;Entry point. Execution begins here.
    27                                  
    28                                  ;============ find the odd number ==========================
    29                                  
    30 00000000 B800000000              mov rax, 0
    31 00000005 48BF-                   mov rdi, output
    31 00000007 [0000000000000000] 
    32 0000000F E8(00000000)            call printf
    33                                  
    34                                  ;begin_loop:
    35                                  ;mov rdi, myarray
    36                                  ;mov r13, [rsp]
    37                                  ;mov [r8 + 8 * r15], r13
    38                                  ;mul r13, 2
    39                                  
    40 00000014 C3                      ret
    41                                  
    42                                  
    43                                  
